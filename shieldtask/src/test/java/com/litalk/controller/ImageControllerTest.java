package com.litalk.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityNotFoundException;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.litalk.init.ImagePoller;
import com.litalk.init.Initializer;
import com.litalk.init.Parser;
import com.litalk.model.ExtendedImage;
import com.litalk.repository.ImageRepository;
import com.litalk.shieldtask.ShieldtaskApplication;

@RunWith(SpringRunner.class)
@WebMvcTest(ImageController.class)
@WithMockUser
@ContextConfiguration(classes= {ShieldtaskApplication.class, Initializer.class, ImagePoller.class, Parser.class})
public class ImageControllerTest {

	@Autowired
	private MockMvc mockMvc;
	
	@MockBean
	private ImageRepository imgRepository;

	@Rule
	public TemporaryFolder folder= new TemporaryFolder();
	
	long millis = 1627146342;
	Date date = new Date(millis);
	ExtendedImage mockExImage;
	ExtendedImage mockExImage2;
	List<ExtendedImage> mockList;
	String IMG1_LOCAL_PATH = (System.getProperty("user.dir") + "\\saved_images\\img1.jpg");
	String ESCAPED_IMG1_LOCAL_PATH = IMG1_LOCAL_PATH.replace("\\", "\\\\");
																		
	
	public ImageControllerTest() {
		initMocks();
	}

	private void initMocks() {
		mockExImage = new ExtendedImage(1, 1, "amazing isalnd view",
				"https://shield-j-test.s3.amazonaws.com/photo1.jfif",
				"https://shield-j-test.s3.amazonaws.com/photo1.jfif",
				IMG1_LOCAL_PATH, date, 8.46);
		mockList = new ArrayList<>();
		mockList.add(mockExImage);
	}

	@Test
	public void getAllImgsTest() throws Exception {
		Mockito.when(imgRepository.findAll()).thenReturn(mockList);
		String filePath = folder.newFile("img1.jpg").getAbsolutePath();
		mockList.get(0).setLocalImgPath(filePath);
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/get-all-images")
				.accept(MediaType.APPLICATION_JSON);
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		String expected = "[{\"headers\":{\"Content-Type\":[\"image/jpeg\"]},\"body\":\"\",\"statusCodeValue\":200,\"statusCode\":\"OK\"}]";
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
	}
	
	@Test
	public void getImgsByAlbumIdTest() throws Exception {
																	  
												 
		Mockito.when(imgRepository.findByAlbumId(1)).thenReturn(mockList);
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/get-images-by-albumid?albumId=1")
				.accept(MediaType.APPLICATION_JSON);
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		String expected = "[{\"headers\":{\"Content-Type\":[\"image/jpeg\"]},\"body\":\"\",\"statusCodeValue\":200,\"statusCode\":\"OK\"}]";
		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
	}
	
	@Test
	public void getImgsByAlbumIdExceptionTest() throws Exception {
		Mockito.when(imgRepository.findByAlbumId(5)).thenReturn(new ArrayList<ExtendedImage>());
		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/get-images-by-albumid?albumId=5")
				.accept(MediaType.APPLICATION_JSON);
		try {
			mockMvc.perform(requestBuilder).andReturn();
		} catch (EntityNotFoundException e) {
			System.out.println("Expected");
		}
		catch(Exception e) {
			Assert.assertFalse("Expected EntityNotFoundException but got " + e.getClass(), Boolean.TRUE);		}
	}

	@Test
	public void getAllImgsInfoTest() throws Exception {
		Mockito.when(imgRepository.findAll()).thenReturn(mockList);
			RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/get-all-images-info")
				.accept(MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();

		String expected = "[{\"albumId\":1,\"id\":1,\"title\":\"amazing isalnd view\","
				+ "\"url\":\"https://shield-j-test.s3.amazonaws.com/photo1.jfif\","
				+ "\"thumbnailUrl\":\"https://shield-j-test.s3.amazonaws.com/photo1.jfif\","
				+ "\"downloadTime\":\"1970-01-19T19:59:06.342+00:00\","
				+ "\"localImgPath\":\"" + ESCAPED_IMG1_LOCAL_PATH + "\","
				+ "\"fileSize\":8.46}]";

		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), false);
	}
}
